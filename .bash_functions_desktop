#!/bin/sh
#---------------------------
#--.bash_functions_desktop--
#--      by lgaggini      --
#--      CC BY-SA 3.0     --
#---------------------------

# default remote host for data
ssh_user=lg
ssh_host=agharti
# cloud remote host for data
cloud_user=lg
cloud_host=nibiru

# alive - check status of an host
# usage - alive <target_host>
alive()
{
    if ping -q -c 1 $1  > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

#
# money management by ledger
#

# money file

ledger=~/doc/lgaggini/money/money.dat
ledger_path=~/doc/lgaggini/money/
accounts_path=~/doc/lgaggini/money/accounts.dat

# money - personal finance manager by ledger
# usage - money <source account> <destination account> <value> <note>
money()
{
    \cp $ledger{,.bak}
    echo `date +%d/%m/%Y` ' ' $4    >> $ledger
    echo '    ' $2 '    ' $3 'EUR'  >> $ledger
    echo '    ' $1                  >> $ledger
    echo                            >> $ledger
    git --git-dir=$ledger_path.git --work-tree=$ledger_path add $ledger
    git --git-dir=$ledger_path.git --work-tree=$ledger_path commit -m '$1 -> $2: $3'
    tail -n 4 $ledger
}

# cash - expenses from cash
# usage - cash <destination account> <value> <note>
cash()
{
    if [[ -z "$3" ]]; then
        note="Uscita-Cash"
    else
        note=$3
    fi
    money "Assets:Cash" $1 $2 $note
}

# getcash - transfer from conto to cash
# usage - getcash <value>
getcash()
{
    if [[ -z "$1" ]]; then
        value=60
    else
        value=$1
    fi
    money "Assets:MPS:Conto" "Assets:Cash" $value "Prelievo"
}

# income - income on conto
# usage - income <source account> <value> <note>
income()
{
    if [[ -z "$3" ]]; then
        note="Entrata-Conto"
    else
        note=$3
    fi
    money $1 "Assets:MPS:Conto" $2 $note
}

# _money - money manager account name completion
_money()
{
    local cur accounts IFS
    
    cur="${COMP_WORDS[COMP_CWORD]}"
    accounts=`cat $accounts_path | sed 's/^account //'`
    IFS=$'\t\n'
    COMP_WORDBREAKS=${COMP_WORDBREAKS//:}
    
    COMPREPLY=( $(compgen -W "${accounts}" -- ${cur}) )
    return 0
}
complete -o nospace -F _money money
complete -o nospace -F _money cash
complete -o nospace -F _money income

# report - report of money
# usage - report <options>
report()
{
    ledger -f $ledger --input-date-format "%d/%m/%Y" -y "%d/%m/%Y" register $*
}

# balance - balance of money
# usage - balance <options>
balance()
{
    ledger -f $ledger --input-date-format "%d/%m/%Y" -y "%d/%m/%Y" -E balance $*
}


# 
# pass manager by pwsafe
#
# password file
pwfile_lgaggini=~/doc/lgaggini/pass/lgaggini.psafe3
pwfile_lgaggini_path=~/doc/lgaggini/pass/
pwfile_lgaggini_pass=~/doc/lgaggini/pass/cat/master.gpg

pwfile_libersoft=~/doc/libersoft/pass/libersoft.psafe3
pwfile_libersoft=~/doc/libersoft/pass/
pwfile_libersoft_pass=~/doc/libersoft/pass/cat/master.gpg

pwfile=$pwfile_lgaggini
pwfile_path=$pwfile_lgaggini_path
pwfile_pass=$pwfile_lgaggini_pass

# getpassdb - retrieve a password db by contex
# usage - getpass <context>
getpassdb()
{
    case "$1" in
        'lgaggini')
            pwfile=$pwfile_lgaggini
            pwfile_path=$pwfile_lgaggini_path
            pwfile_pass=$pwfile_lgaggini_pass
            ;;
        'libersoft')
            pwfile=$pwfile_libersoft
            pwfile_path=$pwfile_libersoft_path
            pwfile_pass=$pwfile_libersoft_pass
            ;;
    esac
}

# getpass - retrieve a password
# usage - getpass <account>
getpass()
{
    getpassdb $1
    gpg --decrypt -q -u $key_pub $pwfile_pass | gpwsafe -f $pwfile -u -p -x $2
}

# setpass - set a new password for existing account
# usage - setpass <account>
setpass()
{
    getpassdb $1
    gpwsafe -f $pwfile -e $2
    git --git-dir=$pwfile_path.git --work-tree=$pwfile_path add $pwfile
    git --git-dir=$pwfile_path.git --work-tree=$pwfile_path commit -m 'new pass for $2'
}

# mkpass - set a new password account
# usage - mkpass <account>
mkpass()
{
    getpassdb $1
    gpwsafe -f $pwfile -a $2
    git --git-dir=$pwfile_path.git --work-tree=$pwfile_path add $pwfile
    git --git-dir=$pwfile_path.git --work-tree=$pwfile_path commit -m 'new account $2'
}

# lspass - list all password
# usage - lspass <regex>
lspass()
{
    getpassdb $1
    gpg --decrypt -q -u $key_pub $pwfile_pass | gpwsafe -f $pwfile --list $2
}

# rmpass - remove password account
# usage - rmpass <account>
rmpass()
{
    getpassdb $1
    gpg --decrypt -q -u $key_pub $pwfile_pass | gpwsafe -f $pwfile --delete $2
    git --git-dir=$pwfile_path.git --work-tree=$pwfile_path add $pwfile
    git --git-dir=$pwfile_path.git --work-tree=$pwfile_path commit -m 'removed account $2'
}


#
# note manager
#

# note folder
note_path_lgaggini=~/doc/lgaggini/note/
note_path_libersoft=~/doc/libersoft/note/

note_path=$note_path_lgaggini

# note - quick note view and edit/create
# usage: note <name>
note()
{
    case "$1" in
        'lgaggini')
            note_path=$note_path_lgaggini
            ;;
        'libersoft')
            note_path=$note_path_libersoft
            ;;
    esac

    if [[ -z "$2" ]]; then
        ls -lh $note_path
    else
        vim $note_path$2.txt
        git --git-dir=$note_path.git --work-tree=$note_path add $note_path$2.txt
        git --git-dir=$note_path.git --work-tree=$note_path commit -m 'cli note change'
    fi
}
# _note - note name completion
_note() 
{
    local cur names IFS
 
    cur="${COMP_WORDS[COMP_CWORD]}"
    names=`ls $note_path | sed 's/\.[^.]*$//'`
    IFS=$'\t\n'
 
    COMPREPLY=( $(compgen -W "${names}" -- ${cur}) )
    return 0
}
complete -o nospace -F _note note
# noteg - search in notes
noteg()
{
    case "$1" in
        'lgaggini')
            note_path=$note_path_lgaggini
            ;;
        'libersoft')
            note_path=$note_path_libersoft
            ;;
    esac
    grep --color=auto -HInrFoi ${*:2} -C 5 $note_path
}


#
# contact manager by abook
#

# addressbook path
addresspath_lgaggini=~/doc/lgaggini/contact/
addressbook_lgaggini=$addresspath_lgagginilgaggini.abook
addresspath_libersoft=~/doc/libersoft/contact/
addressbook_libersoft=$addresspath_libersoftlibersoft.abook

address_path=$addresspath_lgaggini
addressbook=$addressbook_lgaggini


# contact - abook with custom addressbook
# usage: contact
contact()
{
    case "$1" in
        'lgaggini')
            address_path=$addresspath_lgaggini
            addressbook=$addressbook_lgaggini
            ;;
        'libersoft')
            address_path=$addresspath_libersoft
            addressbook=$addressbook_libersoft
            ;;
    esac
    abook --datafile $addressbook
    git --git-dir==$address_path.git --work-tree=$address_path add $addressbook
    git --git-dir==$address_path.git --work-tree=$address_path commit -m 'cli addressbook updated'
}


#
# encloud, secure cloud storage by gpg and ssh
#
# default gpg key
key_uid=nibiru
key_pub=DC7DBC72

# encloud - send encrypted file to cloud
# usage:  encloud <source> <name>
encloud()
{
    alive $cloud_host && cat $1 | gpg --encrypt --recipient $key_uid | ssh $cloud_user@$cloud_host "cat > ~/private/$2.gpg" 
}
# decloud - retrieve and decrypt file from cloud
# usage:  encloud <name> <destination>
decloud()
{
    alive $cloud_host && ssh $cloud_user@$cloud_host "cat ~/private/$1.gpg" | gpg --decrypt -u $key_pub --output $2
}

# awcf - sync awesome config for git sync
# usage: awcf
awcf()
{
    rsync -a -v --existing /home/lg/.config/awesome/ /home/lg/code/lgaggini/awesome-archKiss/
}
